facet_grid(~CHROM) +
theme_bw() +
#scale_fill_manual("Land cover", values = veg_pal) +
geom_label(aes(x=trait, y=chr_whitin_trait_frac_div + 0.03, label=(chr_within_trait_n),  hjust = "middle", vjust = "middle"),
position = position_dodge(width=1), color = "black", fill = "white", label.padding = unit(0.00, "lines"), label.size = NA, size = 2) +
labs(x = "", y = "Fraction of markers in divergent regions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), text = element_text(size = 9), panel.grid = element_blank(), strip.background = element_blank(),
axis.text = element_text(size = 9, color = "black"), plot.margin = unit(c(0.25,0.25,0.25,0.25), "lines"),
legend.position="right")
cowplot::ggsave2(p, filename = "plots/BayPass_divergent_region_overlaps.png", width = 169, height = 127, unit = "mm")
p <- ggplot(bp_3km_div_anno) +
aes(x = trait, y = chr_whitin_trait_frac_div) +
geom_bar(stat="identity", position = "identity") +
facet_grid(~CHROM) +
theme_bw() +
#scale_fill_manual("Land cover", values = veg_pal) +
geom_label(aes(x=trait, y=chr_whitin_trait_frac_div + 0.03, label=(chr_within_trait_n),  hjust = "middle", vjust = "middle"),
position = position_dodge(width=1), color = "black", fill = "white", label.padding = unit(0.00, "lines"), label.size = NA, size = 2) +
labs(x = "", y = "Fraction of markers in divergent regions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), text = element_text(size = 9), panel.grid = element_blank(), strip.background = element_blank(),
axis.text = element_text(size = 9, color = "black"), plot.margin = unit(c(0.25,0.25,0.25,0.25), "lines"),
legend.position="right")
cowplot::ggsave2(p, filename = "plots/BayPass_divergent_region_overlaps.png", width = 169, height = 127, unit = "mm")
p <- ggplot(bp_3km_div_anno) +
aes(x = trait, y = chr_whitin_trait_frac_div) +
geom_bar(stat="identity", position = "identity") +
facet_grid(~CHROM) +
theme_bw() +
#scale_fill_manual("Land cover", values = veg_pal) +
geom_label(aes(x=trait, y=chr_whitin_trait_frac_div + 0.03, label=(chr_within_trait_n),  hjust = "middle", vjust = "middle"),
position = position_dodge(width=1), color = "black", fill = "white", label.padding = unit(0.00, "lines"), label.size = NA, size = 2) +
labs(x = "", y = "Fraction of SNVs in divergent regions") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), text = element_text(size = 9), panel.grid = element_blank(), strip.background = element_blank(),
axis.text = element_text(size = 9, color = "black"), plot.margin = unit(c(0.25,0.25,0.25,0.25), "lines"),
legend.position="right")
cowplot::ggsave2(p, filename = "plots/BayPass_divergent_region_overlaps.png", width = 169, height = 127, unit = "mm")
#!/usr/bin/env Rscript
library(tidyverse)
library(rio)
library(qtl)
library(linkagemapping)
# Set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
library(qtl)
library(rio)
library(tidyverse)
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("~/Dropbox/AndersenLab/LabFolders/Erik/CbRILs/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>% select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>% select(-chrom) %>% rename(chrom = chr2) %>%
dplyr::relocate(chrom, .before = pos)
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>% select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>% select(-chrom) %>% rename(chrom = chr2) %>%
dplyr::relocate(chrom, .before = pos)
# Set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>% select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>% select(-chrom) %>% rename(chrom = chr2) %>%
dplyr::relocate(chrom, .before = pos)
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>% select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>% select(-pos) %>% rename(pos = pos2) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) #%>% select(-pos) %>% rename(pos = pos2) %>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>% select(-chrom) %>% rename(chrom = chr2) %>%
dplyr::relocate(chrom, .before = pos)
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) #%>% select(-chrom) %>% rename(chrom = chr2) %>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>%
select(-chrom) %>% rename(chrom = chr2) #%>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>%
select(-chrom) #%>% rename(chrom = chr2) %>%
#Read in data
#Remove missing genotypes
#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>%
dplyr::select(-chrom) %>% dplyr::rename(chrom = chr2) %>%
dplyr::relocate(chrom, .before = pos)
export(geno, file="data/CbRILgeno-full-reduced.csv")
View(geno)
#This format is currently csvr. I need to add a row for dummy pheno.
#Add row for strain name
#see page 29 of R/qtl book for an example of csvr
test <- data.table::fread("/Users/tim/repos/DFE_Baer/data/CbRILgeno-full-reduced_ERIK.csv")
View(test)
#Read into r/qtl
cr.obj <- read.cross(format ="csvr", file="data/CbRILgeno-full-reduced_ERIK.csv", estimate.map = F, genotypes = c("Q", "V"),
na.strings = "NA", )
#Check for segregation distortion
gt <- geno.table(cr.obj)
#Read into r/qtl
cr.obj <- read.cross(format ="csvr", file="data/CbRILgeno-full-reduced_ERIK.csv", estimate.map = F, genotypes = c("Q", "V"),
na.strings = "NA", )
# NIC estimate recombination fraction
cr.obj_rf <- est.rf(cr.obj)
table(lg[,2])
# make sure there's six linkage groups
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
cr.obj_lg <- formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = TRUE)
mn7 <- markernames(cr.obj_lg, chr=7)
cr.obj_rf <- drop.markers(cr.obj_rf,mn7)
# rerun lines to get linkage group table and check for 6
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
#estiamte genotype error rate
loglik <- err <- c(0.001, 0.0025, 0.005, 0.0075, 0.01, 0.0125, 0.015, 0.0175, 0.02)
for(i in seq(along=err)) {
cat(i, "of", length(err), "\n")
tempmap <- est.map(cr.obj_rf, error.prob=err[i])
loglik[i] <- sum(sapply(tempmap, attr, "loglik"))
}
lod <- (loglik - max(loglik))/log(10)
#Read into r/qtl
cr.obj <- read.cross(format ="csvr", file="data/CbRILgeno-full-reduced_ERIK.csv", estimate.map = F, genotypes = c("Q", "V"),
na.strings = "NA", crosstype="riself")
# drop markers flagged for segregation distortion
gt <- geno.table(cr.obj)
gt[gt$P.value < 0.05/totmar(cr.obj),]
todrop <- rownames(gt[gt$P.value < 1e-10,])
cr.obj <- drop.markers(cr.obj, todrop)
# NIC estimate recombination fraction
cr.obj_rf <- est.rf(cr.obj)
# make sure there's six linkage groups
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
# Get rid of extra linkage group
cr.obj_lg <- formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = TRUE)
mn7 <- markernames(cr.obj_lg, chr=7)
cr.obj_rf <- drop.markers(cr.obj_rf,mn7)
# rerun lines to get linkage group table and check for 6
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
#estiamte genotype error rate
loglik <- err <- c(0.001, 0.0025, 0.005, 0.0075, 0.01, 0.0125, 0.015, 0.0175, 0.02)
for(i in seq(along=err)) {
cat(i, "of", length(err), "\n")
tempmap <- est.map(cr.obj_rf, error.prob=err[i])
loglik[i] <- sum(sapply(tempmap, attr, "loglik"))
}
lod <- (loglik - max(loglik))/log(10)
plot(err, lod, xlab="Genotyping error rate", xlim=c(0,0.02), ylab=expression(paste(log[10], " likelihood")))
# estimate the genetic map (set error.prob variable to the highest likelyhood in the plot generated above.)
CBmap <- est.map(cr.obj_rf,error.prob=0.005,verbose=TRUE)
# estimate the genetic map (set error.prob variable to the highest likelyhood in the plot generated above.)
CBmap <- est.map(cr.obj_rf,error.prob=0.005,verbose=TRUE)
cr.obj_rf <- replacemap(cr.obj_rf,CBmap)
plot(CBmap) # look at the map
# OPTIONAL: if map does not reach convergence then use this code to increase max iterations
CBmap2 <- est.map(CB_newmap, err=0.005, maxit=100000,verbose=TRUE)
# OPTIONAL: if map does not reach convergence then use this code to increase max iterations
CBmap2 <- est.map(CBmap, err=0.005, maxit=100000,verbose=TRUE)
# OPTIONAL: if map does not reach convergence then use this code to increase max iterations
CBmap2 <- est.map(cr.obj_rf, err=0.005, maxit=100000,verbose=TRUE)
library(genetics)
library(tidyverse)
library(rebus)
# Set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
remove.packages("gggenes")
install.packages("tidyverse")
library(tidyverse)
library(biomaRt)
library(Gviz)
library(GenomicRanges)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# pull taf-7.2 gff model from WS276
gff76_taf <- data.table::fread("data/WS276_taf7.2.gff3")
gff82_taf <- data.table::fread("data/WS282_taf7.2.gff3")
gene_df_282 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) #%>%
#==================================================#
# Using Gvis to plot gene models as tracks with UCSC
#===================================================#
# make genome track
axTrack <- GenomeAxisTrack()
# setup for using UCSC genome browser to get taf-7.2 from WBcel235
#options(ucscChromosomeNames=FALSE)
geneTrack <- BiomartGeneRegionTrack(genome="ce11",
chromosome="chrIII", start=12670689, end=12673423,
transcriptAnnotation="symbol", name= "Genes")
# plot taf-7.2
plotTracks(list(itrack, axTrack, geneTrack, geneTrack), chromosome="chrIII", from=12670689, to=12673423)
# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
itrack <- IdeogramTrack(genome = "ce11", chromosome = "chrIII")
# plot taf-7.2
plotTracks(list(itrack, axTrack, geneTrack, geneTrack), chromosome="chrIII", from=12670689, to=12673423)
# plot taf-7.2
plotTracks(list(itrack, axTrack, geneTrack), chromosome="chrIII", from=12670689, to=12673423)
#==================================================#
# Using Gvis to plot gene models as tracks with UCSC
#===================================================#
# make genome track
axTrack <- Gvis::GenomeAxisTrack()
#==================================================#
# Using Gvis to plot gene models as tracks with UCSC
#===================================================#
# make genome track
axTrack <- Gviz::GenomeAxisTrack()
# setup for using UCSC genome browser to get taf-7.2 from ce11
geneTrack <- BiomartGeneRegionTrack(genome="ce11",
chromosome="chrIII", start=12670689, end=12673423,
transcriptAnnotation="symbol", name= "Genes")
# setup for using UCSC genome browser to get taf-7.2 from ce11
geneTrack <- BiomartGeneRegionTrack(genome="ce11",
chromosome="chrIII", start=12670500, end=12673500,
transcriptAnnotation="symbol", name= "Genes")
# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
itrack <- IdeogramTrack(genome = "ce11", chromosome = "chrIII")
# setup for using UCSC genome browser to get taf-7.2 from ce11
geneTrack <- BiomartGeneRegionTrack(genome="ce11",
chromosome="chrIII", start=12670689, end=12673423,
transcriptAnnotation="symbol", name= "Genes")
# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
itrack <- IdeogramTrack(genome = "ce11", chromosome = "chrIII")
# plot taf-7.2
plotTracks(list(itrack, axTrack, geneTrack), chromosome="chrIII", from=12670000, to=12673500)
# setup for using UCSC genome browser to get taf-7.2 from ce11
geneTrack <- Gviz::BiomartGeneRegionTrack(genome="ce11",
chromosome="chrIII", start=12670689, end=12673423,
transcriptAnnotation="symbol", name= "Genes")
# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
itrack <- Gviz::IdeogramTrack(genome = "ce11", chromosome = "chrIII")
# plot taf-7.2
Gviz::plotTracks(list(itrack, axTrack, geneTrack), chromosome="chrIII", from=12670000, to=12673500)
#=================================================================================#
# get release gff, grep to string, convert to GRanges object, make GeneRegionTrack
#=================================================================================#
# make genome track
axTrack <- Gviz::GenomeAxisTrack()
# make GRanges object from Gff file
gene_GRs <- genomation::gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
# make GeneRegionTrack object for Gvis
gene_GRT <- as(gene_GRs, "GeneRegionTrack")
# make GeneRegionTrack object for Gvis
options(ucscChromosomeNames=FALSE)
gene_GRT <- as(gene_GRs, "GeneRegionTrack")
# plot taf-7.2
Gviz::plotTracks(list(axTrack, gene_GRT))
Gviz::plotTracks(list(axTrack, gene_GRT), from = 12670000, to = 12674000)
