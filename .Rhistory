#!/usr/bin/env Rscript
#Load necessary packages
library(tidyverse)
library(geonames)
library(ggrepel)
library(maps)
library(ggthemes)
library(geosphere)
library(scatterpie)
library(rio)
library(viridis)
library(boot)
library(devtools)
install_github("covaruber/sommer")
#!/usr/bin/env Rscript
#Load necessary packages
library(tidyverse)
library(rio)
library(viridis)
library(boot)
library(sommer)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
########################
### define functions ###
########################
# Heritability
# data is data frame that contains strain and phenotype column
# indicies are used by the boot function to sample from the 'data' data.frame
H2.test.boot <- function(data, indicies){
d <- data[indicies,]
pheno <- as.data.frame(dplyr::select(d, phenotype))[,1]
strain <- as.factor(d$strain)
reffMod <- lme4::lmer(pheno ~ 1 + (1|strain))
Variances <- as.data.frame(lme4::VarCorr(reffMod, comp = "Variance"))
Vg <- Variances$vcov[1]
Ve <- Variances$vcov[2]
H2 <- Vg/(Vg+Ve)
# errors <- sqrt(diag(lme4::VarCorr(reffMod, comp = "Variance")$strain))
return(H2)
}
# data is data frame that contains strain and phenotype column
H2.test <- function(data){
pheno <- as.data.frame(dplyr::select(data, phenotype))[,1]
strain <- as.factor(data$strain)
reffMod <- lme4::lmer(pheno ~ 1 + (1|strain))
Variances <- as.data.frame(lme4::VarCorr(reffMod, comp = "Variance"))
Vg <- Variances$vcov[1]
Ve <- Variances$vcov[2]
H2 <- Vg/(Vg+Ve)
# errors <- sqrt(diag(lme4::VarCorr(reffMod, comp = "Variance")$strain))
return(H2)
}
# df is data frame that contains strain and phenotype column
H2.calc <- function(df, boot = T){
if(boot == T){
# bootstrapping with 1000 replications
results <- boot(data=df, statistic=H2.test.boot, R=500)
# get 95% confidence interval
ci <- boot.ci(results, type="bca")
H2_errors <- data.frame(H2 = ci$t0, ci_l = ci$bca[4], ci_r = ci$bca[5])
return(H2_errors)
} else {
H2 <- data.frame(H2 = H2.test(data = df), ci_l = NA, ci_r = NA)
return(H2)
}
}
# remove outliers function (tukey's fences)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
##############################################################################################
### R01 data analysis: Broad-sense and narrow-sense heritability for Patrick Phillips data ###
##############################################################################################
# Read in data from lifespan machine patrick phillips lab
lm_df1 <- data.table::fread('data/CeNDR_lifespans.csv', header = T) %>%
dplyr::mutate(strain = ifelse(strain == "EC19191", "ECA191",
ifelse(strain == "PL238", "DL238", strain)))
lm_df2 <- data.table::fread('data/CeNDR_071919.csv', header = T) %>%
dplyr::mutate(`Censored Reason` = as.character(`Censored Reason`),
`Event Observation Type` = as.character(`Event Observation Type`)) %>%
dplyr::select(device = Device,
exp = Experiment,
plate = `Plate Name`,
row = `Plate Row`,
column = `Plate Column`,
strain = `Strain`,
temp = `Culturing Temperature`,
food = `Food Source`,
event_freq = `Event Frequency`,
ls = `Age at Death (d)`,
DNMF = `Duration Not Fast Moving (d)`,
gap_days = `Longest Gap in Measurement (d)`,
censor = `Censored`,
censor_reason = `Censored Reason`,
event_observation_type = `Event Observation Type`)
View(lm_df1)
#!/usr/bin/env Rscript
#Load necessary packages
library(tidyverse)
library(rio)
library(viridis)
library(repmis)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# load data from burden mapping (VT)
dat <- data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t97_mean.VariableThresholdPrice.assoc')
View(dat)
# load data from burden mapping (VT)
meanT97_VT_dat <- data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t97_mean.VariableThresholdPrice.assoc')
meanT89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Plots/t89_mean.VariableThresholdPrice.assoc')
meanT89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t89_mean.VariableThresholdPrice.assoc')
View(meanT89_VT_dat)
meanT89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t89_mean.VariableThresholdPrice.assoc') %>%
dplyr::mutate(significant = ifelse(PermPvalue < .05/n(), TRUE,FALSE ))
meanT89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t89_mean.VariableThresholdPrice.assoc') %>%
dplyr::mutate(significant = ifelse(PermPvalue < .05/n(), TRUE,FALSE ),
n = n())
gene_desc <- load('/Users/tim/repos/Lifespan/data/gene_descriptions_WS273.Rda')
View(gene_descriptions)
meanT89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t97_t89_diff_mean.VariableThresholdPrice.assoc') %>%
dplyr::mutate(significant = ifelse(PermPvalue < .05/n(), TRUE,FALSE ),
n = n()) # adding bonferroni significance test to data. Not sure about how mtDNA should be treated here. The plot_burden.R script calculates n() before filtereing mtDNA.
meanT97_T89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t97_t89_diff_mean.VariableThresholdPrice.assoc') %>%
dplyr::mutate(significant = ifelse(PermPvalue < .05/n(), TRUE,FALSE ),
n = n()) # adding bonferroni significance test to data. Not sure about how mtDNA should be treated here. The plot_burden.R script calculates n() before filtereing mtDNA.
meanT89_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t89_mean.VariableThresholdPrice.assoc') %>%
dplyr::mutate(significant = ifelse(PermPvalue < .05/n(), TRUE,FALSE ),
n = n()) # adding bonferroni significance test to data. Not sure about how mtDNA should be treated here. The plot_burden.R script calculates n() before filtereing mtDNA.
# load data from burden mapping (VT)
meanT97_VT_dat <- data.table::fread('data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/BURDEN/VT/Data/t97_mean.VariableThresholdPrice.assoc') %>%
dplyr::mutate(significant = ifelse(PermPvalue < .05/n(), TRUE,FALSE ),
n = n()) # adding bonferroni significance test to data. Not sure about how mtDNA should be treated here. The plot_burden.R script calculates n() before filtereing mtDNA.
View(meanT89_VT_dat)
View(meanT97_T89_VT_dat)
View(gene_descriptions)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions)
View(gene_descriptions)
View(dat)
View(meanT89_VT_dat)
View(gene_descriptions)
View(gene_descriptions)
View(meanT89_VT_dat)
View(gene_descriptions)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = Gene)
View(meanT97_VT_dat)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene")
View(T97_desc)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant = T)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T)
T97_T89_desc <- left_join(meanT97_T89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T)
View(T89_desc)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrrange(RANGE, stat)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
tidyr::arrrange(RANGE, stat)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
arrrange(RANGE, stat)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(RANGE, stat)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(RANGE, stat)
View(T89_desc)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(RANGE)
View(T97_desc)
View(T89_desc)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(stat, RANGE)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(`stat`, RANGE)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(Stat, RANGE)
T89_desc <- left_join(meanT89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(RANGE)
# join gene descriptions with significant genes
T97_desc <- left_join(meanT97_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(RANGE)
T97_T89_desc <- left_join(meanT97_T89_VT_dat, gene_descriptions %>% dplyr::rename(Gene = wbgene), by = "Gene") %>%
dplyr::filter(significant == T) %>%
dplyr::arrange(RANGE)
View(T89_desc)
View(dat)
View(meanT89_VT_dat)
View(dat)
View(meanT97_VT_dat)
# get list of strains in mapping
strains <-  names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv'))
# get list of strains in mapping
strains <-  names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))
strains
# convert strains to use in CeNDR
ce_strains <- combine(strains, sep = ", ")
# get list of strains in mapping
strains <-  data.frame(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
View(strains)
# get list of strains in mapping
strains <-  as.vector(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
View(strains)
View(strains)
paste0([1], collapse = ", ")
paste0(.[1], collapse = ", ")
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
paste0([1], collapse = ", ")
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
paste0(.[1], collapse = ", ")
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
paste0([1], collapse = ", ")
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
paste0(strains[1], collapse = ", ")
# convert strains to use in CeNDR
ce_strains <- combine(strains, sep = "", "")
# convert strains to use in CeNDR
ce_strains <- combine(strains, sep = ",")
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
paste0(strains[1], collapse = ", ")
paste0(strains[1], collapse = "")
paste0(strains[1])
strains[1]
toString(strains[1])
# get list of strains in mapping
strains <-  as.data.frame(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
toString(strains[1])
View(strains)
toString(strains[2])
toString(strains[1])
View(strains)
toString(strains[1,2])
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT)))
View(strains)
# get list of strains in mapping
strains <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
dplyr::rename(names = `names(...)`)
View(strains)
toString(strains$names)
strains<-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
dplyr::rename(names = `names(...)`)
View(strains)
library(cegwas2)
devtools::install_github("AndersenLab/cegwas2")
library(cegwas2)
?query_vcf
View(meanT89_VT_dat)
gene_list <- meanT89_VT_dat$Gene
gene_list_T89 <- meanT89_VT_dat$Gene
gene_list_T89 <- as.vector(meanT89_VT_dat$Gene)
gene_list_T89 <- as.vector(T89_desc$Gene)
gene_list_T89 <- T89_desc$Gene
gene_list_T97_T89 <- T97_T89$Gene
gene_list_T97_T89 <- T97_T89_desc$Gene
View(T97_desc)
test <- query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"), samples = strains$names)
gene_list_T89 <- T89_desc$RANGE
gene_list_T97_T89 <- T97_T89_desc$RANGE
test <- query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"), samples = strains$names)
gene_list_T89 <- T89_desc$RANGE %>% dplyr::filter(RANGE != "IV:3067845-3069847")
gene_list_T89 <- T89_desc %>% dplyr::filter(RANGE != "IV:3067845-3069847") %>% pull(RANGE)
test <- query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"), samples = strains$names)
gene_list_T89
view(vcf_query)
test <- cegwas2:::query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"), samples = strains$names)
cegwas2:::query_vcf
test <- cegwas2:::query_vcf(gene_list_T89, samples = strains$names)
test <- cegwas2:::query_vcf(gene_list_T89)
debug(query_vcf)
test <- cegwas2:::query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"), samples = strains$names)
test <- cegwas2:::query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"), samples = strains$names)
regions
query <- regions[1]
query <- gsub("\\.\\.", "-", query)
query <- gsub(",", "", query)
if (!grepl("(I|II|III|IV|V|X|MtDNA).*", query)) {
elegans_gff <- get_db(table = "wormbase_gene")
region <- dplyr::collect(dplyr::filter(elegans_gff,
locus == query | gene_id == query | transcript_id ==
query) %>% dplyr::select(chrom, start, end,
gene_id, locus, exon_id, transcript_id, transcript_biotype) %>%
dplyr::distinct(.keep_all = TRUE)) %>% dplyr::summarize(chrom = chrom[1],
start = min(start), end = max(end)) %>% dplyr::mutate(region_format = paste0(chrom,
":", start, "-", end)) %>% dplyr::select(region_format) %>%
dplyr::distinct(.keep_all = TRUE)
region <- paste(region$region_format, collapse = ",")
query_type <- "locus"
if (stringr::str_length(regions[[1]]) == 0) {
message(paste0(query, " not found."))
region <- NA
}
}
else {
region <- query
query_type <- "region"
}
!grepl("(I|II|III|IV|V|X|MtDNA).*", query)
region <- query
query_type <- "region"
base_header <- c("CHROM", "POS", "REF", "ALT", "FILTER")
"ANN" %in% info
ann_header <- c("allele", "effect", "impact", "gene_name",
"gene_id", "feature_type", "feature_id", "transcript_biotype",
"exon_intron_rank", "nt_change", "aa_change",
"cdna_position_or_len", "protein_position",
"distance_to_feature", "error", "extra")
info_query <- paste0(info, collapse = "\\t%")
format_query <- paste0(format, collapse = "!%")
query_string <- glue::glue("'%CHROM\\t%POS\\t%REF\\t%ALT\\t%FILTER\\t%{info_query}[\\t%{format_query}]\\n'")
long == T
query_string <- glue::glue("'%CHROM\\t%POS\\t%REF\\t%ALT\\t%FILTER\\t%{info_query}[\\t%{format_query}]\\n'")
samples != "ALL"
sample_query <- glue::glue("--samples ", paste(samples,
collapse = ","))
impact != "ALL" & !is.na(impact)
impact_grep <- paste(purrr::discard(impact, is.na),
collapse = "|")
impact_grep <- glue::glue("| egrep \"({impact_grep})\" - ")
output_file <- tempfile()
command <- paste("bcftools", "query", sample_query,
"--regions", region, "-f", query_string, vcf, impact_grep,
">", output_file)
!is.na(region)
message(glue::glue("Query: {query}"))
conn <- system(command)
result <- try(dplyr::tbl_df(data.table::fread(output_file,
col.names = c(base_header, info, samples), sep = "\t",
na.strings = c("", "."))), silent = FALSE)
try(file.remove(output_file))
!grepl("^Error.*", result[[1]][1])
tsv <- result %>% dplyr::mutate(REF = ifelse(REF ==
TRUE, "T", REF), ALT = ifelse(ALT == TRUE,
"T", ALT))
typeof(tsv) == "character" | nrow(tsv) == 0
!("ANN" %in% colnames(tsv))
tsv <- tsv %>% dplyr::mutate(ANN = stringr::str_split(ANN,
",")) %>% tidyr::unnest(ANN) %>% {
if (!is.null(ann_header))
tidyr::separate(., ANN, into = ann_header,
sep = "\\|") %>% dplyr::select(dplyr::one_of(c(base_header,
ann_header)), dplyr::everything(), -extra)
else dplyr::select(., dplyr::one_of(c(base_header)),
dplyr::everything())
} %>% dplyr::mutate(query = query, region = region) %>%
dplyr::select(CHROM, POS, query, region, dplyr::everything())
query_type == "locus"
"impact" %in% names(tsv)
tsv <- tsv[tsv$impact %in% impact, ]
(nrow(tsv) == 0)
(long == FALSE)
tsv <- tidyr::gather_(tsv, "SAMPLE", "FORMAT_COLUMN",
samples) %>% tidyr::separate(FORMAT_COLUMN,
into = format, sep = "\\!", convert = TRUE,
remove = T) %>% {
if ("DP" %in% format)
dplyr::mutate(., DP = as.integer(ifelse((DP ==
".") | is.na(DP), 0, DP)))
else .
} %>% {
if ("TGT" %in% format)
tidyr::separate(., TGT, sep = "\\/|\\|",
into = c("a1", "a2"), convert = T, remove = T)
else .
} %>% {
if ("GT" %in% format)
tidyr::separate(., GT, sep = "\\/|\\|",
into = c("g1", "g2"), convert = T, remove = T) %>%
dplyr::mutate_at(as.integer, .vars = c("g1",
"g2")) %>% dplyr::mutate(genotype = as.integer(rowSums(.[,
c("g1", "g2")])))
else .
}
tsv <- tsv %>% dplyr::mutate_all(function(x) {
ifelse((x == ".") | (x == ""), NA, x)
}) %>% dplyr::mutate_at(.vars = info_columns[info_column_types ==
"Integer" & info_columns %in% info], as.integer) %>%
dplyr::mutate_at(.vars = info_columns[info_column_types ==
"Float" & info_columns %in% info], as.numeric) %>%
dplyr::mutate_at(.vars = info_columns[info_column_types ==
"Flag" & info_columns %in% info], as.logical) %>%
dplyr::mutate_at(.vars = format_columns[format_column_types ==
"Integer" & format_columns %in% format],
as.integer) %>% dplyr::mutate_at(.vars = format_columns[format_column_types ==
"Float" & format_columns %in% format], as.numeric) %>%
dplyr::mutate_at(.vars = format_columns[format_column_types ==
"Flag" & format_columns %in% format],
as.logical)
column_order <- c("CHROM", "POS", "REF", "ALT",
"SAMPLE", "FILTER", "FT", "a1", "a2", "g1",
"g2", "genotype", "query", "region")
column_order_use <- c(column_order[column_order %in%
names(tsv)], names(tsv)[!names(tsv) %in%
column_order])
tsv <- tsv %>% dplyr::select_at(.vars = column_order_use) %>%
dplyr::arrange(CHROM, POS)
!("ANN" %in% info_columns)
tsv
query <- "IV:2459894-2459964"
query <- gsub("\\.\\.", "-", query)
query <- gsub(",", "", query)
!grepl("(I|II|III|IV|V|X|MtDNA).*", query)
stringr::str_length(regions[[1]]) == 0
region <- query
query_type <- "region"
base_header <- c("CHROM", "POS", "REF", "ALT", "FILTER")
"ANN" %in% info
ann_header <- c("allele", "effect", "impact", "gene_name",
"gene_id", "feature_type", "feature_id", "transcript_biotype",
"exon_intron_rank", "nt_change", "aa_change",
"cdna_position_or_len", "protein_position",
"distance_to_feature", "error", "extra")
info_query <- paste0(info, collapse = "\\t%")
format_query <- paste0(format, collapse = "!%")
query_string <- glue::glue("'%CHROM\\t%POS\\t%REF\\t%ALT\\t%FILTER\\t%{info_query}[\\t%{format_query}]\\n'")
long == T
query_string <- glue::glue("'%CHROM\\t%POS\\t%REF\\t%ALT\\t%FILTER\\t%{info_query}[\\t%{format_query}]\\n'")
samples != "ALL"
sample_query <- glue::glue("--samples ", paste(samples,
collapse = ","))
impact != "ALL" & !is.na(impact)
impact_grep <- paste(purrr::discard(impact, is.na),
collapse = "|")
impact_grep <- glue::glue("| egrep \"({impact_grep})\" - ")
output_file <- tempfile()
command <- paste("bcftools", "query", sample_query,
"--regions", region, "-f", query_string, vcf, impact_grep,
">", output_file)
!is.na(region)
message(glue::glue("Query: {query}"))
conn <- system(command)
result <- try(dplyr::tbl_df(data.table::fread(output_file,
col.names = c(base_header, info, samples), sep = "\t",
na.strings = c("", "."))), silent = FALSE)
try(file.remove(output_file))
!grepl("^Error.*", result[[1]][1])
strains_ce
# get list of strains in mapping for pasting into CeNDR and for using in query_vcf
strains_ce <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
dplyr::rename(names = `names(...)`) %>%
toString(strains$names)
strains_ce
# get list of strains in mapping for pasting into CeNDR and for using in query_vcf
strains_ce <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
dplyr::rename(names = `names(...)`) %>%
toString(strains$names)
# get list of strains in mapping for pasting into CeNDR and for using in query_vcf
strains_ce <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
dplyr::rename(names = `names(...)`) %>%
toString(strains$names)
# get list of strains in mapping for pasting into CeNDR and for using in query_vcf
strains_ce <-  tibble(names(data.table::fread('/Users/tim/repos/Lifespan/data/20191112_lifespan_GWA_cegwas2-nf_output/11132019_lifespanEigen_CFY/Genotype_Matrix/Genotype_Matrix.tsv') %>%
dplyr::select(-CHROM, -POS, -REF, -ALT))) %>%
dplyr::rename(names = `names(...)`)
test <-   toString(strains$names)
test
test <- cegwas2:::query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"))
debug(query_vcf)
test <- cegwas2:::query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"))
unbug(query_vcf)
undebug(query_vcf)
test <- cegwas2:::query_vcf(gene_list_T89, format = c("GT"), impact = c("LOW", "MODERATE", "HIGH"))
gene_list_T89 <- T89_desc$RANGE
