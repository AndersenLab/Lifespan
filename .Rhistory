#Remove parents
# QX1410 is 0, VX43 is 1
#Convert 0 to Q and 1 to V
geno <- import("data/20210602_c.b_cross_obj_geno2.tsv") %>%
tidyr::drop_na(.) %>%
#dplyr::rename(marker = chrom_pos) %>%
#tidyr::separate(marker, into = c("chr", "pos"), sep="_", remove=F) %>%
dplyr::mutate(pos2 = as.numeric(pos)) %>%
dplyr::select(-pos) %>% rename(pos = pos2) %>%
dplyr::relocate(pos, .after = chrom) %>%
dplyr::group_by(chrom) %>%
dplyr::arrange(pos, .by_group=T) %>%
dplyr::ungroup() %>%
#dplyr::select(-QX1410, -VX0034) %>%
dplyr::mutate(across(c("ECA2691":"ECA2791"), ~ ifelse(. == 0, "Q", "V"))) %>%
dplyr::mutate(chr2 = ifelse(chrom == "I", 1,
ifelse(chrom == "II", 2,
ifelse(chrom == "III", 3,
ifelse(chrom =="IV", 4,
ifelse(chrom =="V", 5,
ifelse(chrom =="X", 6, NA))))))) %>%
dplyr::select(-chrom) %>% dplyr::rename(chrom = chr2) %>%
dplyr::relocate(chrom, .before = pos)
export(geno, file="data/CbRILgeno-full-reduced.csv")
View(geno)
#This format is currently csvr. I need to add a row for dummy pheno.
#Add row for strain name
#see page 29 of R/qtl book for an example of csvr
test <- data.table::fread("/Users/tim/repos/DFE_Baer/data/CbRILgeno-full-reduced_ERIK.csv")
View(test)
#Read into r/qtl
cr.obj <- read.cross(format ="csvr", file="data/CbRILgeno-full-reduced_ERIK.csv", estimate.map = F, genotypes = c("Q", "V"),
na.strings = "NA", )
#Check for segregation distortion
gt <- geno.table(cr.obj)
#Read into r/qtl
cr.obj <- read.cross(format ="csvr", file="data/CbRILgeno-full-reduced_ERIK.csv", estimate.map = F, genotypes = c("Q", "V"),
na.strings = "NA", )
# NIC estimate recombination fraction
cr.obj_rf <- est.rf(cr.obj)
table(lg[,2])
# make sure there's six linkage groups
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
cr.obj_lg <- formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = TRUE)
mn7 <- markernames(cr.obj_lg, chr=7)
cr.obj_rf <- drop.markers(cr.obj_rf,mn7)
# rerun lines to get linkage group table and check for 6
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
#estiamte genotype error rate
loglik <- err <- c(0.001, 0.0025, 0.005, 0.0075, 0.01, 0.0125, 0.015, 0.0175, 0.02)
for(i in seq(along=err)) {
cat(i, "of", length(err), "\n")
tempmap <- est.map(cr.obj_rf, error.prob=err[i])
loglik[i] <- sum(sapply(tempmap, attr, "loglik"))
}
lod <- (loglik - max(loglik))/log(10)
#Read into r/qtl
cr.obj <- read.cross(format ="csvr", file="data/CbRILgeno-full-reduced_ERIK.csv", estimate.map = F, genotypes = c("Q", "V"),
na.strings = "NA", crosstype="riself")
# drop markers flagged for segregation distortion
gt <- geno.table(cr.obj)
gt[gt$P.value < 0.05/totmar(cr.obj),]
todrop <- rownames(gt[gt$P.value < 1e-10,])
cr.obj <- drop.markers(cr.obj, todrop)
# NIC estimate recombination fraction
cr.obj_rf <- est.rf(cr.obj)
# make sure there's six linkage groups
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
# Get rid of extra linkage group
cr.obj_lg <- formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = TRUE)
mn7 <- markernames(cr.obj_lg, chr=7)
cr.obj_rf <- drop.markers(cr.obj_rf,mn7)
# rerun lines to get linkage group table and check for 6
lg <-formLinkageGroups(cr.obj_rf, max.rf=0.35, min.lod=6,reorgMarkers = FALSE)
table(lg[,2])
#estiamte genotype error rate
loglik <- err <- c(0.001, 0.0025, 0.005, 0.0075, 0.01, 0.0125, 0.015, 0.0175, 0.02)
for(i in seq(along=err)) {
cat(i, "of", length(err), "\n")
tempmap <- est.map(cr.obj_rf, error.prob=err[i])
loglik[i] <- sum(sapply(tempmap, attr, "loglik"))
}
lod <- (loglik - max(loglik))/log(10)
plot(err, lod, xlab="Genotyping error rate", xlim=c(0,0.02), ylab=expression(paste(log[10], " likelihood")))
# estimate the genetic map (set error.prob variable to the highest likelyhood in the plot generated above.)
CBmap <- est.map(cr.obj_rf,error.prob=0.005,verbose=TRUE)
# estimate the genetic map (set error.prob variable to the highest likelyhood in the plot generated above.)
CBmap <- est.map(cr.obj_rf,error.prob=0.005,verbose=TRUE)
cr.obj_rf <- replacemap(cr.obj_rf,CBmap)
plot(CBmap) # look at the map
# OPTIONAL: if map does not reach convergence then use this code to increase max iterations
CBmap2 <- est.map(CB_newmap, err=0.005, maxit=100000,verbose=TRUE)
# OPTIONAL: if map does not reach convergence then use this code to increase max iterations
CBmap2 <- est.map(CBmap, err=0.005, maxit=100000,verbose=TRUE)
# OPTIONAL: if map does not reach convergence then use this code to increase max iterations
CBmap2 <- est.map(cr.obj_rf, err=0.005, maxit=100000,verbose=TRUE)
library(genetics)
library(tidyverse)
library(rebus)
# Set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
remove.packages("gggenes")
install.packages("tidyverse")
library(tidyverse)
library(biomaRt)
library(Gviz)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# pull taf-7.2 gff model from WS276
gff76_taf <- data.table::fread("data/WS276_taf7.2.gff3")
gff82_taf <- data.table::fread("data/WS282_taf7.2.gff3")
gene_df_282 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) #%>%
dplyr::filter(type %in% c("five_prime_UTR", "CDS", "intron", "three_prime_UTR")) %>%
dplyr::mutate(type2 = case_when(type == "five_prime_UTR" ~ "5' utr",
type == "CDS" ~ "coding_region",
type == "intron" ~ "intron",
type == "three_prime_UTR" ~ "3' utr",
TRUE ~ NA_character_),
coordinates = paste0(start, "-", stop)) %>%
dplyr::filter(grepl("Parent=Transcript:Y111B2A.16.1", V9))
gene_df_282 <- gff82_taf %>%
dplyr::rename(type = V3, start = V4, stop = V5) %>%
dplyr::filter(type %in% c("five_prime_UTR", "CDS", "intron", "three_prime_UTR")) %>%
dplyr::mutate(type2 = case_when(type == "five_prime_UTR" ~ "5' utr",
type == "CDS" ~ "coding_region",
type == "intron" ~ "intron",
type == "three_prime_UTR" ~ "3' utr",
TRUE ~ NA_character_),
coordinates = paste0(start, "-", stop)) %>%
dplyr::filter(grepl("Parent=Transcript:Y111B2A.16.1", V9))
## Construct the gene track object for 82
geneTrack <- GeneRegionTrack(start=min(gene_df_282$start), end=max(gene_df_282$stop),
rstart=cyp2b10$start, rends=cyp2b10$end, chromosome=7, genome="mm9",
transcript=cyp2b10$transcript, gene=cyp2b10$gene, symbol=cyp2b10$symbol,
feature=cyp2b10$feature, exon=cyp2b10$exon,
name="Cyp2b10", strand=cyp2b10$strand)
#============================================#
# Using Gvis to plot gene models as tracks
#============================================#
# make genome track
axTrack <- GenomeAxisTrack()
# setup for using UCSC genome browser to get taf-7.2 from WBcel235
#options(ucscChromosomeNames=FALSE)
chr <- "chrIII"
from <- 12670689
to <- 12673423
geneTrack <- BiomartGeneRegionTrack(genome="ce11",
chromosome=chr, start=from, end=to,
transcriptAnnotation="symbol", name= "Genes")
itrack <- IdeogramTrack(genome = "ce11", chromosome = chr)
# plot taf-7.2
plotTracks(list(itrack, axTrack, geneTrack, geneTrack), chromosome=chr, from=from,
to=to)
?BiomartGeneRegionTrack
#=======================================================#
# Using Gvis to plot gene models as tracks with WormBase
#=======================================================#
mart <- useMart("parasite_mart", dataset = "wbps_gene", host = "https://parasite.wormbase.org", port = 443)
geneTrackWB <- BiomartGeneRegionTrack(biomart = mart, genome="ce11",
chromosome=chr, start=from, end=to,
transcriptAnnotation="symbol", name= "Genes")
listAttributes(BiomartGeneRegionTrack(biomart = mart, genome="ce11",
chromosome=chr, start=from, end=to,
transcriptAnnotation="symbol", name= "Genes"))
View(geneTrack)
?makeTxDbFromGFF
#=======================================================#
# Using Gvis to plot gene models as tracks with WormBase
#=======================================================#
test <- GenomicFeatures::makeTxDbFromGFF(file = "data/WS282_taf7.2.gff3", format = "gff3")
#=======================================================#
# Using Gvis to plot gene models as tracks with WormBase
#=======================================================#
gene2 <- GenomicFeatures::makeTxDbFromGFF(file = "data/WS282_taf7.2.gff3", format = "gff3")
?GeneRegionTrack
gene2track <- GeneRegionTrack(gene2)
gene2
gene2track <- GeneRegionTrack(range = gene2)
gene2track <- GeneRegionTrack(range = gene2, chromosoem = "chrIII")
## Load some sample data
data(cyp2b10)
glimpse(cyp2b10)
unique(cyp2b10$feature)
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) %>%
dplyr::mutate(feature = case_when(type == "five_prime_UTR" ~ "utr5",
type == "CDS" ~ "coding_region",
type == "three_prime_UTR" ~ "utr3",
TRUE ~ NA_character_)) #%>%
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) #%>%
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) %>%
dplyr::mutate(feature = case_when(type == "five_prime_UTR" ~ "utr5",
type == "CDS" ~ "coding_region",
type == "three_prime_UTR" ~ "utr3",
TRUE ~ NA_character_)) #%>%
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) %>%
dplyr::mutate(feature = case_when(feature == "five_prime_UTR" ~ "utr5",
feature == "CDS" ~ "coding_region",
feature == "three_prime_UTR" ~ "utr3",
TRUE ~ NA_character_)) #%>%
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) %>%
dplyr::mutate(feature = case_when(feature == "five_prime_UTR" ~ "utr5",
feature == "CDS" ~ "coding_region",
feature == "three_prime_UTR" ~ "utr3",
TRUE ~ NA_character_)) %>%
dplyr::filter(grepl("Transcript:Y111B2A.16.1", V9))
View(gene2)
glimpse(cyp2b10)
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) %>%
dplyr::mutate(feature = case_when(feature == "five_prime_UTR" ~ "utr5",
feature == "CDS" ~ "coding_region",
feature == "three_prime_UTR" ~ "utr3",
TRUE ~ NA_character_)) %>%
dplyr::filter(grepl("Transcript:Y111B2A.16.1", V9)) %>%
dplyr::mutate(width = end - start)
glimpse(cyp2b10)
glmipse(gene2)
glimpse(gene2)
## Directly from the data.frame
gene2 <- gff82_taf %>%
dplyr::mutate(width = NA,
strand = NA,
gene = NA,
exon = NA,
transcript = NA,
symbol = NA) %>%
dplyr::rename(chromosome = V1, start = V4, end = V5,feature = V3) %>%
dplyr::filter(feature %in% c("five_prime_UTR", "CDS", "three_prime_UTR")) %>%
dplyr::mutate(feature = case_when(feature == "five_prime_UTR" ~ "utr5",
feature == "CDS" ~ "coding_region",
feature == "three_prime_UTR" ~ "utr3",
TRUE ~ NA_character_)) %>%
dplyr::filter(grepl("Transcript:Y111B2A.16.1", V9)) %>%
dplyr::mutate(width = end - start,
strand = V7)
glimpse(gene2)
glimpse(cyp2b10)
library(GRanges)
library(GenomicRanges)
?GRanges
#===================================================#
# get gff from wormbase or QUEST? or Local
#===================================================#
wormbase <- useMart(biomart = "parasite_mart",
host = "https://parasite.wormbase.org",
port = 443)
wormbase
listDatasets(wormbase)
head(listAttributes(wormbase))
wormbase2 <- useDataset(mart = wormbase, dataset = "wbps_gene")
head(listFilters(wormbase2))
wormbase
listDatasets(wormbase)
test <- getBM(attributes = c("external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase)
test <- getBM(attributes = c("external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
View(test)
?getBM
listAttributes(wormbase2)
test <- getBM(attributes = c("Genome name", "external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
test <- getBM(attributes = c("Genome name", "external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
test <- getBM(attributes = c("Genome_name", "external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
test <- getBM(attributes = c(`Genome name`, "external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
test <- getBM(attributes = c("display_name_1010", "external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
test
test <- getBM(attributes = c("display_name_1010",
"assembly_accession_1010",
"external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("unc-26","his-33"),
mart = wormbase2)
test
test <- getBM(attributes = c("display_name_1010",
"assembly_accession_1010",
"external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "gene_name",
values = c("taf-7.2","his-33"),
mart = wormbase2)
test
test <- getBM(attributes = c("display_name_1010",
"assembly_accession_1010",
"external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "wbps_transcript_id",
values = c("Y111B2A.16.1"),
mart = wormbase2)
test
test <- getBM(attributes = c("display_name_1010",
"assembly_accession_1010",
"exon_chrom_start",
"external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "wbps_transcript_id",
values = c("Y111B2A.16.1"),
mart = wormbase2)
test
test <- getBM(attributes = c("display_name_1010",
"assembly_accession_1010",
"exon_chrom_start",
"wbps_gene_id",
"transcript_db_name",
"transcript_count",
"transcript_5_utr_start",
"transcript_5_utr_end",
"transcript_3_utr_start",
"transcript_3_utr_end",
"external_gene_id", "wbps_transcript_id", "transcript_biotype"),
filters = "wbps_transcript_id",
values = c("Y111B2A.16.1"),
mart = wormbase2)
test
View(test)
View(gff76_taf)
?GeneRegionTrack
#=================================================================================#
# get release gff, grep to string, convert to GRanges object, make GeneRegionTrack
#=================================================================================#
BiocManager::install("genomation")
?gffToGRanges
library(genomation)
?gffToGRanges
tetst <- gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
View(tetst)
tetst
View(gff82_taf)
?GeneRegionTrack
GeneRegionTrack(range = tetst)# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
GeneRegionTrack(range = tetst, chromosome = "chrIII")# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
seqinfo(tetst)
View(tetst)
GeneRegionTrack(range = tetst, chromosome = "III")# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
GeneRegionTrack(range = tetst, chromosome = "chrIII")# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
options(ucscChromosomeNames=FALSE)
GeneRegionTrack(range = tetst, chromosome = "chrIII")# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
gene <- GeneRegionTrack(range = tetst, chromosome = "chrIII")# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
plotTracks(list(gene), chromosome=chr, from=from,
to=to)
plotTracks(list(gene))
from <- 12670689
to <- 12673423
plotTracks(list(gene), chromosome=chr, from=from,
to=to)
#options(ucscChromosomeNames=FALSE)
chr <- "chrIII"
plotTracks(list(gene), chromosome=chr, from=from,
to=to)
# make genome track
axTrack <- GenomeAxisTrack()
# setup for using UCSC genome browser to get taf-7.2 from WBcel235
#options(ucscChromosomeNames=FALSE)
chr <- "chrIII"
from <- 12670689
to <- 12673423
geneTrack <- BiomartGeneRegionTrack(genome="ce11",
chromosome=chr, start=from, end=to,
transcriptAnnotation="symbol", name= "Genes")
# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
itrack <- IdeogramTrack(genome = "ce11", chromosome = chr)
# plot taf-7.2
plotTracks(list(itrack, axTrack, gene), chromosome=chr, from=from,
to=to)
gene_gff <- gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
gene_track_gff <- GeneRegionTrack(range = gene_gff, chromosome = "chrIII")# get Ideogram: a schematic representation of chromosome, showing their relative size and their cytostain banding pattern.
gene_gff <- gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
# plot taf-7.2
plotTracks(list(itrack, axTrack, geneTrack, geneTrack, gene_track_gff), chromosome=chr, from=from,
to=to)
# plot taf-7.2
plotTracks(list(axTrack, gene_track_gff), chromosome=chr, from=from,
to=to)
test <- GRangesLists as(gene_gff, "GeneRegionTrack")
test <- GRangesLists <- as(gene_gff, "GeneRegionTrack")
# plot taf-7.2
plotTracks(list(axTrack, test), chromosome=chr, from=from,
to=to)
View(test)
View(geneTrack)
test <- as(gene_gff, "GeneRegionTrack")
# plot taf-7.2
plotTracks(list(axTrack, test), chromosome=chr, from=from,
to=to)
# plot taf-7.2
plotTracks(list(axTrack, test), chromosome="III", from=from,
to=to)
View(test)
plotTracks(list(gene), chromosome=chr, from=from,
to=to)
plotTracks(list(gene, chromosome=chr, from=from,
# plot taf-7.2
plotTracks(list(axTrack, test), chromosome="III", from=from,
to=to)
# plot taf-7.2
plotTracks(list(axTrack, test), chromosome="III", from=from,
to=to)
# plot taf-7.2
plotTracks(list(axTrack, test), chromosome="III", from=from,
to=to)
# make gnee region track
gene_gff <- gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
# make gnee region track
gene_gff <- gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
#
# make genome track
axTrack <- GVis::GenomeAxisTrack()
#
# make genome track
axTrack <- Gvis::GenomeAxisTrack()
#
# make genome track
axTrack <- Gvis::GenomeAxisTrack()
library(Gviz)
#
# make genome track
axTrack <- Gvis::GenomeAxisTrack()
?GenomeAxisTrack
#
# make genome track
axTrack <- Gviz::GenomeAxisTrack()
# make gnee region track
gene_gff <- genomation::gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
test <- Gviz::as(gene_gff, "GeneRegionTrack")
test <- as(gene_gff, "GeneRegionTrack")
?as
gene_GRT <- as(gene_GRanges, "GeneRegionTrack")
# make gnee region track
gene_GRs <- genomation::gffToGRanges(gff.file = "data/WS282_taf7.2.gff3")
gene_GRT <- as(gene_GRanges, "GeneRegionTrack")
gene_GRT <- as(gene_GRs, "GeneRegionTrack")
source("~/repos/Lifespan/scripts/Gviz.R", echo=TRUE)
plotTracks(list(axTrack, gene_GRT))
plotTracks(list(axTrack, gene_GRT), from = 12670000, to = 12674000)
