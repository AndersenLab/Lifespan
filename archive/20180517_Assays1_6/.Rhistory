dplyr::select(-strain)
# scale traits
scales_pc_traits <- as.data.frame(scale(pc_traits))
# create PCs
pca_obj <- princomp(scales_pc_traits)
# figure out how many PCs to keep that will explain > 90% of the variance
# pull the total variance explained with each PC and call it "drug.cumsum"
cumsums <- t(as.matrix(cumsum(pca_obj$sdev^2/sum(pca_obj$sdev^2))))
cumsums <- as.data.frame(cumsums) %>%
tidyr::gather(comp, var) %>%
dplyr::filter(var > 0.9)
# the first component in the dataframe is the first one that goes over 90%, so we want to keep it and everything else below it
keep <- as.numeric(stringr::str_split_fixed(cumsums$comp[1], "Comp.", 2)[,2])
# keep only those PCs phenotypes for all RIAIL strains
colnames(pca_obj$scores) <- paste(pheno$condition[1], colnames(pca_obj$scores), sep = "_")
PCpheno <- data.frame(pca_obj$scores[,1:keep]) %>%
dplyr::mutate(strain = rownames(.)) %>%
tidyr::gather(trait, phenotype, -strain) %>%
dplyr::mutate(trait = gsub("Comp.", "PC", trait),
phenotype = phenotype * -1) %>%
dplyr::select(strain, trait, value = phenotype) %>%
tidyr::separate(trait, into = c("condition", "trait"), by = "_")
return(list(pca_obj, PCpheno))
}
predict_pc <- function(pheno, pca_obj, keep = 24) {
# clean dataframe
pc_traits <- pheno %>%
dplyr::mutate(drugtrait = paste0(condition, ".", trait)) %>%
dplyr::ungroup()%>%
dplyr::mutate(well = paste(plate, row, col, strain, sep = "-")) %>%
dplyr::select(well, drugtrait, phenotype)%>%
unique() %>%
tidyr::spread(drugtrait, phenotype) %>%
na.omit()
# keep strains as rownames and remove strain
row.names(pc_traits) <- pc_traits$well
pc_traits <- pc_traits %>%
dplyr::select(-well)
# scale traits
scales_pc_traits <- as.data.frame(scale(pc_traits))
# predict PCA based on pca_obj
pcapredict <- data.frame(predict(pca_obj, scales_pc_traits))
colnames(pcapredict) <- paste(pheno$condition[1], colnames(pcapredict), sep = "_")
pcaout <- pcapredict[,1:keep] %>%
dplyr::mutate(well = rownames(.)) %>%
tidyr::separate(well, into = c("plate", "row", "col", "strain"), by = "-") %>%
tidyr::gather(trait, phenotype, -c(plate:strain)) %>%
dplyr::mutate(trait = gsub("Comp.", "PC", trait),
phenotype = phenotype)
return(pcaout)
}
plot_genopheno <- function(pheno, cond, trt, chrom) {
nilgeno_plot <- nil_plot(unique(pheno$strain), chr = chrom)
pheno$strain <- factor(pheno$strain, levels = unique(nilgeno_plot[[2]]$sample),
labels = unique(nilgeno_plot[[2]]$sample), ordered = T)
# Plot NIL phenotypes in condition-
plot <- cowplot::plot_grid(nilgeno_plot[[1]],
quick_plot_breakup_flip(pheno, cond, trt), labels = c("A","B"),  nrow = 1, ncol = 2, align = "v")
return(plot)
}
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/RIAIL_data/allRIAILsPCregressed.Rda")
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/RIAIL_data/N2xCB4856cross_full2.Rda")
wd <- "~/Dropbox/AndersenLab/LabFolders/Katie/projects/chemos/HTA_sorter/"
source("~/Documents/Writing/2018_ACS/scripts/NIL_genotype_plots_TAC.R")
source("~/Documents/Writing/2018_ACS/scripts/NIL_phenotype_plots_TAC.R")
drugcross <- linkagemapping::mergepheno(N2xCB4856cross_full2, allRIAILsPCregressed, set = 2)
allRIAILsregressed <- allRIAILsPCregressed %>%
dplyr::filter(condition == "docetaxel",
strain %in% (drugcross$pheno %>% dplyr::filter(set == 2))$strain,
!grepl("red|yellow|green|iqr|f.|PC", trait),
!strain %in% c("N2", "CB4856")) %>%
dplyr::mutate(drugtrait = paste0(condition, ".", trait)) %>%
dplyr::arrange(strain)
out <- calc_pc(allRIAILsregressed)
linkage_pca <- out[[1]]
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/20180829/data/docetaxel-GWER.chromosomal.annotated.Rda")
normn_link <- maxlodplot_kt(annotatedmap %>% dplyr::filter(trait == "docetaxel.norm.n", is.na(var_exp) | var_exp >= 0.05)) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
strip.background = element_blank(),
panel.background = element_blank())
meanEXT_link <- maxlodplot_kt(annotatedmap %>% dplyr::filter(trait == "docetaxel.mean.EXT", is.na(var_exp) | var_exp >= .07)) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
text = element_text(size = 2),
strip.background = element_blank(),
panel.background = element_blank())
meanEXT_pxg <- pxgplot_kt(drugcross, annotatedmap %>% dplyr::filter(trait == "docetaxel.mean.EXT", is.na(var_exp) | var_exp >= 0.15) , pointsize = 0.25) +
scale_x_discrete(labels = c("N2","CB")) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
strip.background = element_blank(),
panel.background = element_blank())
normnpxg <- pxgplot_kt(drugcross, annotatedmap %>% dplyr::filter(trait == "docetaxel.norm.n", is.na(var_exp) | var_exp >= 0.15), pointsize = 0.25) +
scale_x_discrete(labels = c("N2","CB")) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
strip.background = element_blank(),
panel.background = element_blank())
links <- cowplot::plot_grid(meanEXT_link, normn_link, nrow =2, labels = c("A", "C"), align = "vh")
pxgs <- cowplot::plot_grid(meanEXT_pxg, normnpxg, nrow = 2, labels = c("B", "D"), align = "vh")
Full <- cowplot::plot_grid(links, pxgs, ncol = 2, rel_widths = c(1,.25), align = "vh")
Full
mean_ext_interval_IV <- annotatedmap %>% dplyr::filter(trait == "docetaxel.mean.EXT", var_exp >= 0.09) %>%
dplyr::select(marker, ci_r_pos, ci_l_pos, trait, chr, var_exp)
PC1_interval_IV <- annotatedmap %>% dplyr::filter(trait == "docetaxel.PC1", var_exp >= 0.10) %>%
dplyr::select(marker, ci_r_pos, ci_l_pos, trait, chr, var_exp)
Full
load(glue::glue("{wd}/20171026_crazy_assay/chrIV/chrIV_regressed.Rda"))
chrIV_regressed_edit <- chrIV_regressed %>%
dplyr::filter(strain != "ECA674")
meanE <- plot_genopheno(chrIV_regressed_edit, "docetaxel", "mean.EXT", "IV")
meanE
plot <- cowplot::plot_grid(nilgeno_plot[[1]],
quick_plot_breakup_flip(pheno, cond, trt), labels = c("A","B"),  nrow = 1, ncol = 2)
return(plot)
plot_genopheno <- function(pheno, cond, trt, chrom) {
nilgeno_plot <- nil_plot(unique(pheno$strain), chr = chrom)
pheno$strain <- factor(pheno$strain, levels = unique(nilgeno_plot[[2]]$sample),
labels = unique(nilgeno_plot[[2]]$sample), ordered = T)
# Plot NIL phenotypes in condition-
plot <- cowplot::plot_grid(nilgeno_plot[[1]],
quick_plot_breakup_flip(pheno, cond, trt), labels = c("A","B"),  nrow = 1, ncol = 2)
return(plot)
}
load(glue::glue("{wd}/20171026_crazy_assay/chrIV/chrIV_regressed.Rda"))
chrIV_regressed_edit <- chrIV_regressed %>%
dplyr::filter(strain != "ECA674")
meanE <- plot_genopheno(chrIV_regressed_edit, "docetaxel", "mean.EXT", "IV")
meanE
ggsave(glue::glue({plot_dir},"NIL_narrowing.pdf"), height = 3, width = 3)
knitr::opts_chunk$set(echo = FALSE, message = F, warning = F, fig.width = 8)
library(tidyverse)
library(linkagemapping)
plot_dir <- "/Users/tim/Documents/Writing/2018_ACS/plots/"
calc_pc <- function(pheno) {
# calculate PC for linkage
pc_traits <- pheno %>%
dplyr::mutate(drugtrait = paste0(condition, ".", trait)) %>%
dplyr::ungroup()%>%
dplyr::select(strain, drugtrait, phenotype)%>%
unique() %>%
tidyr::spread(drugtrait, phenotype) %>%
na.omit()
# keep strains as rownames and remove strain
row.names(pc_traits) <- pc_traits$strain
pc_traits <- pc_traits %>%
dplyr::select(-strain)
# scale traits
scales_pc_traits <- as.data.frame(scale(pc_traits))
# create PCs
pca_obj <- princomp(scales_pc_traits)
# figure out how many PCs to keep that will explain > 90% of the variance
# pull the total variance explained with each PC and call it "drug.cumsum"
cumsums <- t(as.matrix(cumsum(pca_obj$sdev^2/sum(pca_obj$sdev^2))))
cumsums <- as.data.frame(cumsums) %>%
tidyr::gather(comp, var) %>%
dplyr::filter(var > 0.9)
# the first component in the dataframe is the first one that goes over 90%, so we want to keep it and everything else below it
keep <- as.numeric(stringr::str_split_fixed(cumsums$comp[1], "Comp.", 2)[,2])
# keep only those PCs phenotypes for all RIAIL strains
colnames(pca_obj$scores) <- paste(pheno$condition[1], colnames(pca_obj$scores), sep = "_")
PCpheno <- data.frame(pca_obj$scores[,1:keep]) %>%
dplyr::mutate(strain = rownames(.)) %>%
tidyr::gather(trait, phenotype, -strain) %>%
dplyr::mutate(trait = gsub("Comp.", "PC", trait),
phenotype = phenotype * -1) %>%
dplyr::select(strain, trait, value = phenotype) %>%
tidyr::separate(trait, into = c("condition", "trait"), by = "_")
return(list(pca_obj, PCpheno))
}
predict_pc <- function(pheno, pca_obj, keep = 24) {
# clean dataframe
pc_traits <- pheno %>%
dplyr::mutate(drugtrait = paste0(condition, ".", trait)) %>%
dplyr::ungroup()%>%
dplyr::mutate(well = paste(plate, row, col, strain, sep = "-")) %>%
dplyr::select(well, drugtrait, phenotype)%>%
unique() %>%
tidyr::spread(drugtrait, phenotype) %>%
na.omit()
# keep strains as rownames and remove strain
row.names(pc_traits) <- pc_traits$well
pc_traits <- pc_traits %>%
dplyr::select(-well)
# scale traits
scales_pc_traits <- as.data.frame(scale(pc_traits))
# predict PCA based on pca_obj
pcapredict <- data.frame(predict(pca_obj, scales_pc_traits))
colnames(pcapredict) <- paste(pheno$condition[1], colnames(pcapredict), sep = "_")
pcaout <- pcapredict[,1:keep] %>%
dplyr::mutate(well = rownames(.)) %>%
tidyr::separate(well, into = c("plate", "row", "col", "strain"), by = "-") %>%
tidyr::gather(trait, phenotype, -c(plate:strain)) %>%
dplyr::mutate(trait = gsub("Comp.", "PC", trait),
phenotype = phenotype)
return(pcaout)
}
plot_genopheno <- function(pheno, cond, trt, chrom) {
nilgeno_plot <- nil_plot(unique(pheno$strain), chr = chrom)
pheno$strain <- factor(pheno$strain, levels = unique(nilgeno_plot[[2]]$sample),
labels = unique(nilgeno_plot[[2]]$sample), ordered = T)
# Plot NIL phenotypes in condition-
plot <- cowplot::plot_grid(nilgeno_plot[[1]],
quick_plot_breakup_flip(pheno, cond, trt), labels = c("A","B"),  nrow = 1, ncol = 2, align = "vh", axis = "b")
return(plot)
}
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/RIAIL_data/allRIAILsPCregressed.Rda")
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/RIAIL_data/N2xCB4856cross_full2.Rda")
wd <- "~/Dropbox/AndersenLab/LabFolders/Katie/projects/chemos/HTA_sorter/"
source("~/Documents/Writing/2018_ACS/scripts/NIL_genotype_plots_TAC.R")
source("~/Documents/Writing/2018_ACS/scripts/NIL_phenotype_plots_TAC.R")
drugcross <- linkagemapping::mergepheno(N2xCB4856cross_full2, allRIAILsPCregressed, set = 2)
allRIAILsregressed <- allRIAILsPCregressed %>%
dplyr::filter(condition == "docetaxel",
strain %in% (drugcross$pheno %>% dplyr::filter(set == 2))$strain,
!grepl("red|yellow|green|iqr|f.|PC", trait),
!strain %in% c("N2", "CB4856")) %>%
dplyr::mutate(drugtrait = paste0(condition, ".", trait)) %>%
dplyr::arrange(strain)
out <- calc_pc(allRIAILsregressed)
linkage_pca <- out[[1]]
load("~/Dropbox/AndersenLab/RCode/Linkage mapping/RIAILsMappings/20180829/data/docetaxel-GWER.chromosomal.annotated.Rda")
normn_link <- maxlodplot_kt(annotatedmap %>% dplyr::filter(trait == "docetaxel.norm.n", is.na(var_exp) | var_exp >= 0.05)) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
strip.background = element_blank(),
panel.background = element_blank())
meanEXT_link <- maxlodplot_kt(annotatedmap %>% dplyr::filter(trait == "docetaxel.mean.EXT", is.na(var_exp) | var_exp >= .07)) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
text = element_text(size = 2),
strip.background = element_blank(),
panel.background = element_blank())
meanEXT_pxg <- pxgplot_kt(drugcross, annotatedmap %>% dplyr::filter(trait == "docetaxel.mean.EXT", is.na(var_exp) | var_exp >= 0.15) , pointsize = 0.25) +
scale_x_discrete(labels = c("N2","CB")) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
strip.background = element_blank(),
panel.background = element_blank())
normnpxg <- pxgplot_kt(drugcross, annotatedmap %>% dplyr::filter(trait == "docetaxel.norm.n", is.na(var_exp) | var_exp >= 0.15), pointsize = 0.25) +
scale_x_discrete(labels = c("N2","CB")) +
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8),
strip.background = element_blank(),
panel.background = element_blank())
links <- cowplot::plot_grid(meanEXT_link, normn_link, nrow =2, labels = c("A", "C"), align = "vh")
pxgs <- cowplot::plot_grid(meanEXT_pxg, normnpxg, nrow = 2, labels = c("B", "D"), align = "vh")
Full <- cowplot::plot_grid(links, pxgs, ncol = 2, rel_widths = c(1,.25), align = "vh")
load(glue::glue("{wd}/20171026_crazy_assay/chrIV/chrIV_regressed.Rda"))
chrIV_regressed_edit <- chrIV_regressed %>%
dplyr::filter(strain != "ECA674")
meanE <- plot_genopheno(chrIV_regressed_edit, "docetaxel", "mean.EXT", "IV")
meanE
load("~Dropbox/AndersenLab/LabFolders/Tim/projects/Toxins/data/2018_assay_experiment_regressed_DMSO_traits_outliers_removed.Rda")
load("~/Dropbox/AndersenLab/LabFolders/Tim/projects/Toxins/data/2018_assay_experiment_regressed_DMSO_traits_outliers_removed.Rda")
load("~/Dropbox/AndersenLab/LabFolders/Tim/projects/Toxins/data/2018_assay_experiment_regressed_DMSO_traits_outliers_removed.Rda")
View(DMSO)
dmso_plot <- DMSO %>%
dplyr::select(strain, norm.n, mean.TOF) %>%
dplyr::filter(strain %in% c("N2", "CB4856", "ECA396", "DL238", "QX1794", "ECA36", "JU2600", "MY2693", "JU1400", "JU2526")) %>% # 1st round of divergent C. elgans choices
tidyr::gather(trait, phenotype, -strain)
library(tidyverse)
library(cegwas)
dmso_plot <- DMSO %>%
dplyr::select(strain, norm.n, mean.TOF) %>%
dplyr::filter(strain %in% c("N2", "CB4856", "ECA396", "DL238", "QX1794", "ECA36", "JU2600", "MY2693", "JU1400", "JU2526")) %>% # 1st round of divergent C. elgans choices
tidyr::gather(trait, phenotype, -strain)
View(DMSO)
dmso_plot <- DMSO %>%
dplyr::select(strain, ctrl_phenotype_norm.n, ctrl_phenotype_mean.TOF) %>%
dplyr::filter(strain %in% c("N2", "CB4856", "ECA396", "DL238", "QX1794", "ECA36", "JU2600", "MY2693", "JU1400", "JU2526")) %>% # 1st round of divergent C. elgans choices
tidyr::gather(trait, phenotype, -strain)
View(dmso_plot)
dmso_plot <- DMSO %>%
dplyr::select(strain, ctrl_phenotype_norm.n, ctrl_phenotype_mean.TOF, ctrl_phenotype_cv.TOF) %>%
dplyr::filter(strain %in% c("N2", "CB4856", "ECA396", "DL238", "QX1794", "ECA36", "JU2600", "MY2693", "JU1400", "JU2526")) %>% # 1st round of divergent C. elgans choices
tidyr::gather(trait, phenotype, -strain)
View(dmso_plot)
ggplot(dmso_plot) +
aes(., x= strain, y = phenotype) +
facet_grid(~trait) +
geom_jitter(width = .1, size =3, alpha = .5) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 14),
axis.text.y = ggplot2::element_text(size = 14),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
strip.text.x = ggplot2::element_text(size = 14)) +
labs(y = "RAW phenotype", x = "")
ggplot(dmso_plot) +
aes(., x= strain, y = phenotype) +
facet_grid(~trait, scales = "free") +
geom_jitter(width = .1, size =3, alpha = .5) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 14),
axis.text.y = ggplot2::element_text(size = 14),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
strip.text.x = ggplot2::element_text(size = 14)) +
labs(y = "RAW phenotype", x = "")
ggplot(dmso_plot) +
aes(., x= strain, y = phenotype) +
facet_wrap(~trait, scales = "free") +
geom_jitter(width = .1, size =3, alpha = .5) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 14),
axis.text.y = ggplot2::element_text(size = 14),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
strip.text.x = ggplot2::element_text(size = 14)) +
labs(y = "RAW phenotype", x = "")
ggplot(dmso_plot) +
aes(., x= strain, y = phenotype) +
facet_wrap(~trait, scales = "free") +
geom_jitter(width = .1, size =3, alpha = .5) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 14),
axis.text.y = ggplot2::element_text(size = 14),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
strip.text.x = ggplot2::element_text(size = 14)) +
labs(y = "assay_experiment_regressed_ctrl_phenotype", x = "")
ggsave('~/Dropbox/AndersenLab/LabFolders/Tim/projects/Toxins/plots/DMSO_traits_2017GWAS.pdf', width = 12, height = 10)
ggplot(dmso_plot) +
aes(., x= strain, y = phenotype) +
facet_wrap(~trait, scales = "free") +
geom_jitter(width = .1, size =3, alpha = .5) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 14, angle = 90, hjust = 1),
axis.text.y = ggplot2::element_text(size = 14),
axis.title.x = ggplot2::element_text(size = 14),
axis.title.y = ggplot2::element_text(size = 14),
strip.text.x = ggplot2::element_text(size = 14)) +
labs(y = "assay_experiment_regressed_ctrl_phenotype", x = "")
ggsave('~/Dropbox/AndersenLab/LabFolders/Tim/projects/Toxins/plots/DMSO_traits_2017GWAS.pdf', width = 12, height = 10)
load("~/Dropbox/AndersenLab/LabFolders/Tim/projects/2018HawaiiSampling/data/fulcrum/df.Rda")
View(df)
View(df)
library(rio)
library(ggplot2)
library(dplyr)
library(survival)
library(flexsurv)
library(broom)
library(minpack.lm)
library(forcats)
library(glue)
library(scales)
library(boot)
try(setwd(dirname(rstudioapi::getActiveDocumentContext()$path)))
dat <- as.data.frame(read.csv(file = "WildIsolateLSData_180515.csv", header = T)) %>%
dplyr::mutate(lifespan_days = ifelse(lifespan_days == "NaN", NA, lifespan_days))
glimpse(dat)
H2.test.boot <- function(data, indicies){
d <- data[indicies,]
pheno <- as.data.frame(dplyr::select(d, phenotype))[,1]
strain <- as.factor(d$strain)
reffMod <- lme4::lmer(pheno ~ 1 + (1|strain))
Variances <- as.data.frame(lme4::VarCorr(reffMod, comp = "Variance"))
Vg <- Variances$vcov[1]
Ve <- Variances$vcov[2]
H2 <- Vg/(Vg+Ve)
# errors <- sqrt(diag(lme4::VarCorr(reffMod, comp = "Variance")$strain))
return(H2)
}
H2.test <- function(data){
pheno <- as.data.frame(dplyr::select(data, phenotype))[,1]
strain <- as.factor(data$strain)
reffMod <- lme4::lmer(pheno ~ 1 + (1|strain))
Variances <- as.data.frame(lme4::VarCorr(reffMod, comp = "Variance"))
Vg <- Variances$vcov[1]
Ve <- Variances$vcov[2]
H2 <- Vg/(Vg+Ve)
# errors <- sqrt(diag(lme4::VarCorr(reffMod, comp = "Variance")$strain))
return(H2)
}
H2.calc <- function(df, boot = T){
if(boot == T){
# bootstrapping with 1000 replications
results <- boot(data=df, statistic=H2.test.boot, R=1000)
# get 95% confidence interval
ci <- boot.ci(results, type="bca")
H2_errors <- data.frame(H2 = ci$t0, ci_l = ci$bca[4], ci_r = ci$bca[5])
return(H2_errors)
} else {
H2 <- data.frame(H2 = H2.test(data = df), ci_l = NA, ci_r = NA)
return(H2)
}
}
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
dat_proc <- dat %>%
dplyr::filter(!is.na(lifespan_days), activity_type == -1) %>%
dplyr::group_by(replicate_num, plate_num, strain, worm_num) %>%
dplyr::mutate(alive = ifelse(time_days >= lifespan_days, 0, 1)) %>%
dplyr::group_by(replicate_num, plate_num, strain, time_days) %>%
dplyr::summarise(frac_alive = sum(alive)/n(),
n = n())
raw_plot_all <- ggplot(dat_proc) +
aes(x=time_days, y=frac_alive, color=strain) +
geom_line() +
theme_light() +
labs(x="Day", y="Fraction alive") +
theme(legend.position = "right") +
facet_grid(replicate_num ~ plate_num, labeller = label_both)
raw_plot_all
df_h2 <- dat %>%
dplyr::distinct(strain, replicate_num, plate_num, worm_num, lifespan_days) %>%
dplyr::select(replicate_num, plate_num, strain, worm_num, lifespan_days) %>%
dplyr::mutate(status = ifelse(is.na(lifespan_days), 0, 1)) %>%
dplyr::mutate(plate_num = factor(plate_num))
lifespan_plot <- ggplot(df_h2) +
geom_boxplot(aes(x = strain, y = lifespan_days), outlier.shape = NA) +
geom_jitter(aes(x = strain, y = lifespan_days, color = as.factor(replicate_num)), width = .25, alpha = 0.5) +
theme_light() +
labs(x="", y="Lifespan (d)", colour = "replicate", title = "" ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_h2_cal <- df_h2 %>%
dplyr::filter(!is.na(lifespan_days)) %>%
dplyr::group_by(plate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::distinct(plate_num, strain, phenotype) %>%
dplyr::mutate(trait = "lifespan")
df_h2_only <- df_h2_cal %>%
dplyr::ungroup() %>%
dplyr::group_by(trait) %>%
dplyr::do(broom::tidy(H2.test(.))) %>%
dplyr::rename(H2 = x)
lifespan_plot <- ggplot(df_h2_cal) +
geom_boxplot(aes(x = fct_reorder(strain, phenotype), y = phenotype), outlier.shape = NA) +
geom_jitter(aes(x = strain, y = phenotype, color = as.factor(plate_num)), width = .25, alpha = 0.5) +
theme_light() +
labs(x="", y="Mean Lifespan (d)", colour = "plate", title = "Heritability: 0.03" ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_h2_cal_ir <- df_h2 %>%
dplyr::filter(!is.na(lifespan_days)) %>%
dplyr::group_by(replicate_num, plate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::group_by(replicate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::distinct(replicate_num, strain, phenotype) %>%
dplyr::mutate(trait = "lifespan")
df_h2_only_ir <- df_h2_cal_ir %>%
dplyr::ungroup() %>%
dplyr::group_by(trait) %>%
dplyr::do(broom::tidy(H2.test(.))) %>%
dplyr::rename(H2 = x)
lifespan_plot_ir <- ggplot(df_h2_cal_ir) +
geom_boxplot(aes(x = fct_reorder(strain, phenotype), y = phenotype), outlier.shape = NA) +
geom_jitter(aes(x = strain, y = phenotype, color = as.factor(replicate_num)), width = .25, alpha = 0.5) +
theme_light() +
labs(x="", y="Mean Lifespan (d)", colour = "replicate", title = "Lifespan Heritability: 3.021841e-17" ) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
lifespan_plot_ir
ls_block_effect <- lm(phenotype ~ replicate_num, data = df_h2 %>%
dplyr::filter(!is.na(lifespan_days)) %>%
dplyr::group_by(replicate_num, plate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::group_by(replicate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::distinct(replicate_num, strain, phenotype) %>%
dplyr::mutate(trait = "lifespan") %>%
dplyr::ungroup())
df_h2_cal_ir_regressed <- df_h2 %>%
dplyr::filter(!is.na(lifespan_days)) %>%
dplyr::group_by(replicate_num, plate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::group_by(replicate_num, strain) %>%
dplyr::mutate(phenotype = mean(lifespan_days)) %>%
dplyr::distinct(replicate_num, strain, phenotype) %>%
dplyr::mutate(trait = "lifespan") %>%
dplyr::ungroup() %>%
dplyr::mutate(phenotype = residuals(lm(phenotype ~ replicate_num)))
View(df_h2_cal_ir_regressed)
df_h2_only_ir_regressed <- df_h2_cal_ir_regressed %>%
dplyr::ungroup() %>%
dplyr::group_by(trait) %>%
dplyr::do(broom::tidy(H2.test(.))) %>%
dplyr::rename(H2 = x)
View(df_h2_only_ir_regressed)
View(df_h2_cal_ir_regressed)
